// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test if the Stack has all the resources. 1`] = `
Object {
  "Mappings": Object {
    "SourceCode": Object {
      "General": Object {
        "KeyPrefix": "aws-security-hub-automated-response-and-remediation/v1.0.0",
        "S3Bucket": "solutions",
      },
    },
    "mappings": Object {
      "sendAnonymousMetrics": Object {
        "data": "Yes",
      },
    },
  },
  "Metadata": Object {
    "AWS::CloudFormation::Interface": Object {
      "ParameterGroups": Array [
        Object {
          "Label": Object {
            "default": "Security Standard Playbooks",
          },
          "Parameters": Array [],
        },
      ],
    },
  },
  "Parameters": Object {
    "ReuseOrchestratorLogGroup": Object {
      "AllowedValues": Array [
        "yes",
        "no",
      ],
      "Default": "no",
      "Description": "Reuse existing Orchestrator Log Group? Choose \\"yes\\" if the log group already exists, else \\"no\\"",
      "Type": "String",
    },
  },
  "Resources": Object {
    "CreateCustomActionE7A973F5": Object {
      "DependsOn": Array [
        "createCustomActionRoleF0047414",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "False positive. the lambda role allows write to CW Logs",
            },
            Object {
              "id": "W89",
              "reason": "There is no need to run this lambda in a VPC",
            },
            Object {
              "id": "W92",
              "reason": "There is no need for Reserved Concurrency due to low request rate",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "solutions-eu-west-1",
          "S3Key": "aws-security-hub-automated-response-and-remediation/v1.0.0/lambda/createCustomAction.py.zip",
        },
        "Description": "Custom resource to create an action target in Security Hub",
        "Environment": Object {
          "Variables": Object {
            "AWS_PARTITION": Object {
              "Ref": "AWS::Partition",
            },
            "SOLUTION_ID": "SO0111",
            "SOLUTION_VERSION": "v1.0.0",
            "log_level": "info",
            "sendAnonymousMetrics": Object {
              "Fn::FindInMap": Array [
                "mappings",
                "sendAnonymousMetrics",
                "data",
              ],
            },
          },
        },
        "FunctionName": "SO0111-SHARR-CustomAction",
        "Handler": "createCustomAction.lambda_handler",
        "Layers": Array [
          Object {
            "Ref": "SharrLambdaLayer5BF8F147",
          },
        ],
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "createCustomActionRoleF0047414",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 600,
      },
      "Type": "AWS::Lambda::Function",
    },
    "RemediateWithSharrCustomActionABE4122A": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "CreateCustomActionE7A973F5",
        "createCustomActionPolicyE424E925",
      ],
      "Properties": Object {
        "Description": "Submit the finding to AWS Security Hub Automated Response and Remediation",
        "Id": "SHARRRemediation",
        "Name": "Remediate with SHARR",
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "CreateCustomActionE7A973F5",
            "Arn",
          ],
        },
      },
      "Type": "Custom::ActionTarget",
      "UpdateReplacePolicy": "Delete",
    },
    "RemediateWithSharrEventsRuleRole4BE0B6FF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "RemediateWithSharrEventsRuleRoleDefaultPolicy44783695": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "orchestratorStateMachine77C3F8FB",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RemediateWithSharrEventsRuleRoleDefaultPolicy44783695",
        "Roles": Array [
          Object {
            "Ref": "RemediateWithSharrEventsRuleRole4BE0B6FF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RemediateWithSharrRemediateCustomAction40B496D2": Object {
      "Properties": Object {
        "Description": "Remediate with SHARR",
        "EventPattern": Object {
          "detail": Object {
            "findings": Object {
              "Compliance": Object {
                "Status": Array [
                  "FAILED",
                  "WARNING",
                ],
              },
            },
          },
          "detail-type": Array [
            "Security Hub Findings - Custom Action",
          ],
          "resources": Array [
            Object {
              "Fn::GetAtt": Array [
                "RemediateWithSharrCustomActionABE4122A",
                "Arn",
              ],
            },
          ],
          "source": Array [
            "aws.securityhub",
          ],
        },
        "Name": "Remediate_with_SHARR_CustomAction",
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "orchestratorStateMachine77C3F8FB",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "RemediateWithSharrEventsRuleRole4BE0B6FF",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "SHARRKeyC551FE02": Object {
      "Properties": Object {
        "Description": "KMS Customer Managed Key that SHARR will use to encrypt data",
        "Name": "/Solutions/SO0111/CMK_ARN",
        "Type": "String",
        "Value": Object {
          "Fn::GetAtt": Array [
            "SHARRkeyE6BD0F56",
            "Arn",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SHARRSNSTopicB940F479": Object {
      "Properties": Object {
        "Description": "SNS Topic ARN where SHARR will send status messages. This        topic can be useful for driving additional actions, such as email notifications,        trouble ticket updates.",
        "Name": "/Solutions/SO0111/SNS_Topic_ARN",
        "Type": "String",
        "Value": Object {
          "Ref": "SHARRTopic229CFB9E",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SHARRSendAnonymousMetricsCDAE439D": Object {
      "Properties": Object {
        "Description": "Flag to enable or disable sending anonymous metrics.",
        "Name": "/Solutions/SO0111/sendAnonymousMetrics",
        "Type": "String",
        "Value": Object {
          "Fn::FindInMap": Array [
            "mappings",
            "sendAnonymousMetrics",
            "data",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SHARRTopic229CFB9E": Object {
      "Properties": Object {
        "DisplayName": "SHARR Playbook Topic (SO0111)",
        "KmsMasterKeyId": Object {
          "Fn::GetAtt": Array [
            "SHARRkeyE6BD0F56",
            "Arn",
          ],
        },
        "TopicName": "SO0111-SHARR_Topic",
      },
      "Type": "AWS::SNS::Topic",
    },
    "SHARRkeyAlias37E34763": Object {
      "Properties": Object {
        "AliasName": "alias/SO0111-SHARR-Key",
        "TargetKeyId": Object {
          "Fn::GetAtt": Array [
            "SHARRkeyE6BD0F56",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
    },
    "SHARRkeyE6BD0F56": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "EnableKeyRotation": true,
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Encrypt*",
                "kms:Decrypt*",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Describe*",
              ],
              "Condition": Object {
                "ArnEquals": Object {
                  "kms:EncryptionContext:aws:logs:arn": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:eu-west-1:111111111111:log-group:SO0111-SHARR-*",
                      ],
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Principal": Object {
                "Service": Array [
                  "sns.amazonaws.com",
                  Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "logs.",
                        Object {
                          "Ref": "AWS::URLSuffix",
                        },
                      ],
                    ],
                  },
                ],
              },
              "Resource": "*",
            },
            Object {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::111111111111:root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::111111111111:root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Retain",
    },
    "SHARRversionAC0E4F96": Object {
      "Properties": Object {
        "Description": "Solution version for metrics.",
        "Name": "/Solutions/SO0111/version",
        "Type": "String",
        "Value": "v1.0.0",
      },
      "Type": "AWS::SSM::Parameter",
    },
    "SharrLambdaLayer5BF8F147": Object {
      "Properties": Object {
        "CompatibleRuntimes": Array [
          "python3.6",
          "python3.7",
          "python3.8",
        ],
        "Content": Object {
          "S3Bucket": "solutions-eu-west-1",
          "S3Key": "aws-security-hub-automated-response-and-remediation/v1.0.0/lambda/layer.zip",
        },
        "Description": "SO0111 SHARR Common functions used by the solution",
        "LicenseInfo": "https://www.apache.org/licenses/LICENSE-2.0",
      },
      "Type": "AWS::Lambda::LayerVersion",
    },
    "checkSSMDocState06AC440F": Object {
      "DependsOn": Array [
        "orchestratorRole46A9F242",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "False positive. Access is provided via a policy",
            },
            Object {
              "id": "W89",
              "reason": "There is no need to run this lambda in a VPC",
            },
            Object {
              "id": "W92",
              "reason": "There is no need for Reserved Concurrency",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "solutions-eu-west-1",
          "S3Key": "aws-security-hub-automated-response-and-remediation/v1.0.0/lambda/check_ssm_doc_state.py.zip",
        },
        "Description": "Checks the status of an SSM Automation Document in the target account",
        "Environment": Object {
          "Variables": Object {
            "AWS_PARTITION": Object {
              "Ref": "AWS::Partition",
            },
            "SOLUTION_ID": "SO0111",
            "SOLUTION_VERSION": "v1.0.0",
            "log_level": "info",
          },
        },
        "FunctionName": "SO0111-SHARR-checkSSMDocState",
        "Handler": "check_ssm_doc_state.lambda_handler",
        "Layers": Array [
          Object {
            "Ref": "SharrLambdaLayer5BF8F147",
          },
        ],
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "orchestratorRole46A9F242",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 600,
      },
      "Type": "AWS::Lambda::Function",
    },
    "createCustomActionPolicyE424E925": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "Resource * is required for CloudWatch Logs policies used on Lambda functions.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Resource * is required for CloudWatch Logs policies used on Lambda functions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "cloudwatch:PutMetricData",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "securityhub:CreateActionTarget",
                "securityhub:DeleteActionTarget",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:PutParameter",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:*:111111111111:parameter/Solutions/SO0111/*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SO0111-SHARR_Custom_Action",
        "Roles": Array [
          Object {
            "Ref": "createCustomActionRoleF0047414",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "createCustomActionRoleF0047414": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W28",
              "reason": "Static names chosen intentionally to provide easy integration with playbook templates",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "Lambda role to allow creation of Security Hub Custom Actions",
      },
      "Type": "AWS::IAM::Role",
    },
    "execAutomation5D89E251": Object {
      "DependsOn": Array [
        "orchestratorRole46A9F242",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "False positive. Access is provided via a policy",
            },
            Object {
              "id": "W89",
              "reason": "There is no need to run this lambda in a VPC",
            },
            Object {
              "id": "W92",
              "reason": "There is no need for Reserved Concurrency",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "solutions-eu-west-1",
          "S3Key": "aws-security-hub-automated-response-and-remediation/v1.0.0/lambda/exec_ssm_doc.py.zip",
        },
        "Description": "Executes an SSM Automation Document in a target account",
        "Environment": Object {
          "Variables": Object {
            "AWS_PARTITION": Object {
              "Ref": "AWS::Partition",
            },
            "SOLUTION_ID": "SO0111",
            "SOLUTION_VERSION": "v1.0.0",
            "log_level": "info",
          },
        },
        "FunctionName": "SO0111-SHARR-execAutomation",
        "Handler": "exec_ssm_doc.lambda_handler",
        "Layers": Array [
          Object {
            "Ref": "SharrLambdaLayer5BF8F147",
          },
        ],
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "orchestratorRole46A9F242",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 600,
      },
      "Type": "AWS::Lambda::Function",
    },
    "getApprovalRequirementE7F50E54": Object {
      "DependsOn": Array [
        "orchestratorRole46A9F242",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "False positive. Access is provided via a policy",
            },
            Object {
              "id": "W89",
              "reason": "There is no need to run this lambda in a VPC",
            },
            Object {
              "id": "W92",
              "reason": "There is no need for Reserved Concurrency",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "solutions-eu-west-1",
          "S3Key": "aws-security-hub-automated-response-and-remediation/v1.0.0/lambda/get_approval_requirement.py.zip",
        },
        "Description": "Determines if a manual approval is required for remediation",
        "Environment": Object {
          "Variables": Object {
            "AWS_PARTITION": Object {
              "Ref": "AWS::Partition",
            },
            "SOLUTION_ID": "SO0111",
            "SOLUTION_VERSION": "v1.0.0",
            "WORKFLOW_RUNBOOK": "",
            "log_level": "info",
          },
        },
        "FunctionName": "SO0111-SHARR-getApprovalRequirement",
        "Handler": "get_approval_requirement.lambda_handler",
        "Layers": Array [
          Object {
            "Ref": "SharrLambdaLayer5BF8F147",
          },
        ],
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "orchestratorRole46A9F242",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 600,
      },
      "Type": "AWS::Lambda::Function",
    },
    "monitorSSMExecStateB496B8AF": Object {
      "DependsOn": Array [
        "orchestratorRole46A9F242",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "False positive. Access is provided via a policy",
            },
            Object {
              "id": "W89",
              "reason": "There is no need to run this lambda in a VPC",
            },
            Object {
              "id": "W92",
              "reason": "There is no need for Reserved Concurrency",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "solutions-eu-west-1",
          "S3Key": "aws-security-hub-automated-response-and-remediation/v1.0.0/lambda/check_ssm_execution.py.zip",
        },
        "Description": "Checks the status of an SSM automation document execution",
        "Environment": Object {
          "Variables": Object {
            "AWS_PARTITION": Object {
              "Ref": "AWS::Partition",
            },
            "SOLUTION_ID": "SO0111",
            "SOLUTION_VERSION": "v1.0.0",
            "log_level": "info",
          },
        },
        "FunctionName": "SO0111-SHARR-monitorSSMExecState",
        "Handler": "check_ssm_execution.lambda_handler",
        "Layers": Array [
          Object {
            "Ref": "SharrLambdaLayer5BF8F147",
          },
        ],
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "orchestratorRole46A9F242",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 600,
      },
      "Type": "AWS::Lambda::Function",
    },
    "notifyPolicy320847DC": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "Resource * is required for CloudWatch Logs and Security Hub policies used by core solution Lambda function for notifications.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Resource * is required for CloudWatch Logs and Security Hub policies used by core solution Lambda function for notifications.",
            },
            Object {
              "id": "W58",
              "reason": "False positive. Access is provided via a policy",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "securityhub:BatchUpdateFindings",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ssm:GetParameter",
                "ssm:PutParameter",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:eu-west-1:111111111111:parameter/Solutions/SO0111/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:GenerateDataKey",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "SHARRkeyE6BD0F56",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":sns:eu-west-1:111111111111:SO0111-SHARR_Topic",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SO0111-SHARR_Orchestrator_Notifier",
        "Roles": Array [
          Object {
            "Ref": "orchestratorRole46A9F242",
          },
          Object {
            "Ref": "notifyRole40298120",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "notifyRole40298120": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W28",
              "reason": "Static names chosen intentionally to provide easy integration with playbook orchestrator step functions.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "Lambda role to perform notification and logging from orchestrator step function",
      },
      "Type": "AWS::IAM::Role",
    },
    "orchestratorNestedLogStack4DD66790": Object {
      "Properties": Object {
        "Parameters": Object {
          "KmsKeyArn": Object {
            "Fn::GetAtt": Array [
              "SHARRKeyC551FE02",
              "Value",
            ],
          },
          "ReuseOrchestratorLogGroup": Object {
            "Ref": "ReuseOrchestratorLogGroup",
          },
        },
        "TemplateURL": Object {
          "Fn::Join": Array [
            "",
            Array [
              "https://",
              Object {
                "Fn::FindInMap": Array [
                  "SourceCode",
                  "General",
                  "S3Bucket",
                ],
              },
              "-reference.s3.amazonaws.com/",
              Object {
                "Fn::FindInMap": Array [
                  "SourceCode",
                  "General",
                  "KeyPrefix",
                ],
              },
              "/aws-sharr-orchestrator-log.template",
            ],
          ],
        },
      },
      "Type": "AWS::CloudFormation::Stack",
    },
    "orchestratorPolicy8045810D": Object {
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "Resource * is required for read-only policies used by orchestrator Lambda functions.",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W12",
              "reason": "Resource * is required for read-only policies used by orchestrator Lambda functions.",
            },
          ],
        },
      },
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:PutParameter",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ssm:*:111111111111:parameter/Solutions/SO0111/*",
                  ],
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":iam::*:role/SO0111-SHARR-Orchestrator-Member",
                  ],
                ],
              },
            },
            Object {
              "Action": "organizations:ListTagsForResource",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "SO0111-SHARR_Orchestrator",
        "Roles": Array [
          Object {
            "Ref": "orchestratorRole46A9F242",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "orchestratorRole12B410FD": Object {
      "DeletionPolicy": "Retain",
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-IAM5",
              "reason": "CloudWatch Logs permissions require resource * except for DescribeLogGroups, except for GovCloud, which only works with resource *",
            },
          ],
        },
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W11",
              "reason": "CloudWatch Logs permissions require resource * except for DescribeLogGroups, except for GovCloud, which only works with resource *",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "states.eu-west-1.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": Array [
          Object {
            "PolicyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": Array [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups",
                  ],
                  "Effect": "Allow",
                  "Resource": "*",
                },
                Object {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": Array [
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "arn:",
                          Object {
                            "Ref": "AWS::Partition",
                          },
                          ":lambda:eu-west-1:111111111111:function:",
                          Object {
                            "Fn::Select": Array [
                              6,
                              Object {
                                "Fn::Split": Array [
                                  ":",
                                  Object {
                                    "Fn::GetAtt": Array [
                                      "checkSSMDocState06AC440F",
                                      "Arn",
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      ],
                    },
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "arn:",
                          Object {
                            "Ref": "AWS::Partition",
                          },
                          ":lambda:eu-west-1:111111111111:function:",
                          Object {
                            "Fn::Select": Array [
                              6,
                              Object {
                                "Fn::Split": Array [
                                  ":",
                                  Object {
                                    "Fn::GetAtt": Array [
                                      "execAutomation5D89E251",
                                      "Arn",
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      ],
                    },
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "arn:",
                          Object {
                            "Ref": "AWS::Partition",
                          },
                          ":lambda:eu-west-1:111111111111:function:",
                          Object {
                            "Fn::Select": Array [
                              6,
                              Object {
                                "Fn::Split": Array [
                                  ":",
                                  Object {
                                    "Fn::GetAtt": Array [
                                      "monitorSSMExecStateB496B8AF",
                                      "Arn",
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      ],
                    },
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "arn:",
                          Object {
                            "Ref": "AWS::Partition",
                          },
                          ":lambda:eu-west-1:111111111111:function:",
                          Object {
                            "Fn::Select": Array [
                              6,
                              Object {
                                "Fn::Split": Array [
                                  ":",
                                  Object {
                                    "Fn::GetAtt": Array [
                                      "sendNotifications1367638A",
                                      "Arn",
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      ],
                    },
                    Object {
                      "Fn::Join": Array [
                        "",
                        Array [
                          "arn:",
                          Object {
                            "Ref": "AWS::Partition",
                          },
                          ":lambda:eu-west-1:111111111111:function:",
                          Object {
                            "Fn::Select": Array [
                              6,
                              Object {
                                "Fn::Split": Array [
                                  ":",
                                  Object {
                                    "Fn::GetAtt": Array [
                                      "getApprovalRequirementE7F50E54",
                                      "Arn",
                                    ],
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      ],
                    },
                  ],
                },
                Object {
                  "Action": Array [
                    "kms:Encrypt",
                    "kms:Decrypt",
                    "kms:GenerateDataKey",
                  ],
                  "Effect": "Allow",
                  "Resource": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "arn:",
                        Object {
                          "Ref": "AWS::Partition",
                        },
                        ":kms:eu-west-1:111111111111:alias/SO0111-SHARR-Key",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "BasePolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "orchestratorRole46A9F242": Object {
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W28",
              "reason": "Static names chosen intentionally to provide easy integration with playbook orchestrator step functions.",
            },
          ],
        },
      },
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "Lambda role to allow cross account read-only SHARR orchestrator functions",
        "RoleName": "SO0111-SHARR-Orchestrator-Admin",
      },
      "Type": "AWS::IAM::Role",
    },
    "orchestratorSHARROrchestratorArn0ACC7B05": Object {
      "Properties": Object {
        "Description": "Arn of the SHARR Orchestrator Step Function. This step function routes findings to remediation runbooks.",
        "Name": "/Solutions/SO0111/OrchestratorArn",
        "Type": "String",
        "Value": Object {
          "Ref": "orchestratorStateMachine77C3F8FB",
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "orchestratorStateMachine77C3F8FB": Object {
      "DependsOn": Array [
        "orchestratorNestedLogStack4DD66790",
        "orchestratorRole12B410FD",
      ],
      "Metadata": Object {
        "cdk_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "AwsSolutions-SF1",
              "reason": "False alarm. Logging configuration is overridden to log ALL.",
            },
            Object {
              "id": "AwsSolutions-SF2",
              "reason": "X-Ray is not needed for this use case.",
            },
          ],
        },
      },
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"Get Finding Data from Input\\",\\"States\\":{\\"Get Finding Data from Input\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"Extract top-level data needed for remediation\\",\\"Parameters\\":{\\"EventType.$\\":\\"$.detail-type\\",\\"Findings.$\\":\\"$.detail.findings\\"},\\"Next\\":\\"Process Findings\\"},\\"Process Findings\\":{\\"Type\\":\\"Map\\",\\"Comment\\":\\"Process all findings in CloudWatch Event\\",\\"Next\\":\\"EOJ\\",\\"Parameters\\":{\\"Finding.$\\":\\"$$.Map.Item.Value\\",\\"EventType.$\\":\\"$.EventType\\"},\\"Iterator\\":{\\"StartAt\\":\\"Finding Workflow State NEW?\\",\\"States\\":{\\"Finding Workflow State NEW?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Or\\":[{\\"Variable\\":\\"$.EventType\\",\\"StringEquals\\":\\"Security Hub Findings - Custom Action\\"},{\\"And\\":[{\\"Variable\\":\\"$.Finding.Workflow.Status\\",\\"StringEquals\\":\\"NEW\\"},{\\"Variable\\":\\"$.EventType\\",\\"StringEquals\\":\\"Security Hub Findings - Imported\\"}]}],\\"Next\\":\\"Get Remediation Approval Requirement\\"}],\\"Default\\":\\"Finding Workflow State is not NEW\\"},\\"Finding Workflow State is not NEW\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"Notification\\":{\\"Message.$\\":\\"States.Format('Finding Workflow State is not NEW ({}).', $.Finding.Workflow.Status)\\",\\"State.$\\":\\"States.Format('NOTNEW')\\"},\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\"},\\"Next\\":\\"notify\\"},\\"notify\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Send notifications\\",\\"TimeoutSeconds\\":300,\\"HeartbeatSeconds\\":60,\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "sendNotifications1367638A",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"Automation Document is not Active\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"Notification\\":{\\"Message.$\\":\\"States.Format('Automation Document ({}) is not active ({}) in the member account({}).', $.AutomationDocId, $.AutomationDocument.DocState, $.Finding.AwsAccountId)\\",\\"State.$\\":\\"States.Format('REMEDIATIONNOTACTIVE')\\",\\"updateSecHub\\":\\"yes\\"},\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\",\\"AccountId.$\\":\\"$.AutomationDocument.AccountId\\",\\"AutomationDocId.$\\":\\"$.AutomationDocument.AutomationDocId\\",\\"RemediationRole.$\\":\\"$.AutomationDocument.RemediationRole\\",\\"ControlId.$\\":\\"$.AutomationDocument.ControlId\\",\\"SecurityStandard.$\\":\\"$.AutomationDocument.SecurityStandard\\",\\"SecurityStandardVersion.$\\":\\"$.AutomationDocument.SecurityStandardVersion\\"},\\"Next\\":\\"notify\\"},\\"Automation Doc Active?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.AutomationDocument.DocState\\",\\"StringEquals\\":\\"ACTIVE\\",\\"Next\\":\\"Execute Remediation\\"},{\\"Variable\\":\\"$.AutomationDocument.DocState\\",\\"StringEquals\\":\\"NOTACTIVE\\",\\"Next\\":\\"Automation Document is not Active\\"},{\\"Variable\\":\\"$.AutomationDocument.DocState\\",\\"StringEquals\\":\\"NOTENABLED\\",\\"Next\\":\\"Security Standard is not enabled\\"},{\\"Variable\\":\\"$.AutomationDocument.DocState\\",\\"StringEquals\\":\\"NOTFOUND\\",\\"Next\\":\\"No Remediation for Control\\"}],\\"Default\\":\\"check_ssm_doc_state Error\\"},\\"Get Automation Document State\\":{\\"Next\\":\\"Automation Doc Active?\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"Orchestrator Failed\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Get the status of the remediation automation document in the target account\\",\\"TimeoutSeconds\\":60,\\"ResultPath\\":\\"$.AutomationDocument\\",\\"ResultSelector\\":{\\"DocState.$\\":\\"$.Payload.status\\",\\"Message.$\\":\\"$.Payload.message\\",\\"SecurityStandard.$\\":\\"$.Payload.securitystandard\\",\\"SecurityStandardVersion.$\\":\\"$.Payload.securitystandardversion\\",\\"SecurityStandardSupported.$\\":\\"$.Payload.standardsupported\\",\\"ControlId.$\\":\\"$.Payload.controlid\\",\\"AccountId.$\\":\\"$.Payload.accountid\\",\\"RemediationRole.$\\":\\"$.Payload.remediationrole\\",\\"AutomationDocId.$\\":\\"$.Payload.automationdocid\\",\\"ResourceRegion.$\\":\\"$.Payload.resourceregion\\"},\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "checkSSMDocState06AC440F",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"Get Remediation Approval Requirement\\":{\\"Next\\":\\"Get Automation Document State\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"Orchestrator Failed\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Determine whether the selected remediation requires manual approval\\",\\"TimeoutSeconds\\":300,\\"ResultPath\\":\\"$.Workflow\\",\\"ResultSelector\\":{\\"WorkflowDocument.$\\":\\"$.Payload.workflowdoc\\",\\"WorkflowAccount.$\\":\\"$.Payload.workflowaccount\\",\\"WorkflowRole.$\\":\\"$.Payload.workflowrole\\",\\"WorkflowConfig.$\\":\\"$.Payload.workflow_data\\"},\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "getApprovalRequirementE7F50E54",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"Orchestrator Failed\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"Notification\\":{\\"Message.$\\":\\"States.Format('Orchestrator failed: {}', $.Error)\\",\\"State.$\\":\\"States.Format('LAMBDAERROR')\\",\\"Details.$\\":\\"States.Format('Cause: {}', $.Cause)\\"},\\"Payload.$\\":\\"$\\"},\\"Next\\":\\"notify\\"},\\"Execute Remediation\\":{\\"Next\\":\\"Remediation Queued\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"Orchestrator Failed\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Execute the SSM Automation Document in the target account\\",\\"TimeoutSeconds\\":300,\\"HeartbeatSeconds\\":60,\\"ResultPath\\":\\"$.SSMExecution\\",\\"ResultSelector\\":{\\"ExecState.$\\":\\"$.Payload.status\\",\\"Message.$\\":\\"$.Payload.message\\",\\"ExecId.$\\":\\"$.Payload.executionid\\",\\"Account.$\\":\\"$.Payload.executionaccount\\",\\"Region.$\\":\\"$.Payload.executionregion\\"},\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "execAutomation5D89E251",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"Remediation Queued\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"Set parameters for notification\\",\\"Parameters\\":{\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\",\\"AutomationDocument.$\\":\\"$.AutomationDocument\\",\\"SSMExecution.$\\":\\"$.SSMExecution\\",\\"Notification\\":{\\"Message.$\\":\\"States.Format('Remediation queued for {} control {} in account {}', $.AutomationDocument.SecurityStandard, $.AutomationDocument.ControlId, $.AutomationDocument.AccountId)\\",\\"State.$\\":\\"States.Format('QUEUED')\\",\\"ExecId.$\\":\\"$.SSMExecution.ExecId\\"}},\\"Next\\":\\"Queued Notification\\"},\\"Queued Notification\\":{\\"Next\\":\\"execMonitor\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Send notification that a remediation has queued\\",\\"TimeoutSeconds\\":300,\\"HeartbeatSeconds\\":60,\\"ResultPath\\":\\"$.notificationResult\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "sendNotifications1367638A",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"execMonitor\\":{\\"Next\\":\\"Remediation completed?\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"Orchestrator Failed\\"}],\\"Type\\":\\"Task\\",\\"Comment\\":\\"Monitor the remediation execution until done\\",\\"TimeoutSeconds\\":300,\\"HeartbeatSeconds\\":60,\\"ResultPath\\":\\"$.Remediation\\",\\"ResultSelector\\":{\\"ExecState.$\\":\\"$.Payload.status\\",\\"ExecId.$\\":\\"$.Payload.executionid\\",\\"RemediationState.$\\":\\"$.Payload.remediation_status\\",\\"Message.$\\":\\"$.Payload.message\\",\\"LogData.$\\":\\"$.Payload.logdata\\",\\"AffectedObject.$\\":\\"$.Payload.affected_object\\"},\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "monitorSSMExecStateB496B8AF",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"Wait for Remediation\\":{\\"Type\\":\\"Wait\\",\\"Seconds\\":15,\\"Next\\":\\"execMonitor\\"},\\"Remediation completed?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.Remediation.RemediationState\\",\\"StringEquals\\":\\"Failed\\",\\"Next\\":\\"Remediation Failed\\"},{\\"Variable\\":\\"$.Remediation.ExecState\\",\\"StringEquals\\":\\"Success\\",\\"Next\\":\\"Remediation Succeeded\\"},{\\"Variable\\":\\"$.Remediation.ExecState\\",\\"StringEquals\\":\\"TimedOut\\",\\"Next\\":\\"Remediation Failed\\"},{\\"Variable\\":\\"$.Remediation.ExecState\\",\\"StringEquals\\":\\"Cancelling\\",\\"Next\\":\\"Remediation Failed\\"},{\\"Variable\\":\\"$.Remediation.ExecState\\",\\"StringEquals\\":\\"Cancelled\\",\\"Next\\":\\"Remediation Failed\\"},{\\"Variable\\":\\"$.Remediation.ExecState\\",\\"StringEquals\\":\\"Failed\\",\\"Next\\":\\"Remediation Failed\\"}],\\"Default\\":\\"Wait for Remediation\\"},\\"Remediation Failed\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"Set parameters for notification\\",\\"Parameters\\":{\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\",\\"SSMExecution.$\\":\\"$.SSMExecution\\",\\"AutomationDocument.$\\":\\"$.AutomationDocument\\",\\"Notification\\":{\\"Message.$\\":\\"States.Format('Remediation failed for {} control {} in account {}: {}', $.AutomationDocument.SecurityStandard, $.AutomationDocument.ControlId, $.AutomationDocument.AccountId, $.Remediation.Message)\\",\\"State.$\\":\\"$.Remediation.ExecState\\",\\"Details.$\\":\\"$.Remediation.LogData\\",\\"ExecId.$\\":\\"$.Remediation.ExecId\\",\\"AffectedObject.$\\":\\"$.Remediation.AffectedObject\\"}},\\"Next\\":\\"notify\\"},\\"Remediation Succeeded\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"Set parameters for notification\\",\\"Parameters\\":{\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\",\\"AccountId.$\\":\\"$.AutomationDocument.AccountId\\",\\"AutomationDocId.$\\":\\"$.AutomationDocument.AutomationDocId\\",\\"RemediationRole.$\\":\\"$.AutomationDocument.RemediationRole\\",\\"ControlId.$\\":\\"$.AutomationDocument.ControlId\\",\\"SecurityStandard.$\\":\\"$.AutomationDocument.SecurityStandard\\",\\"SecurityStandardVersion.$\\":\\"$.AutomationDocument.SecurityStandardVersion\\",\\"Notification\\":{\\"Message.$\\":\\"States.Format('Remediation succeeded for {} control {} in account {}: {}', $.AutomationDocument.SecurityStandard, $.AutomationDocument.ControlId, $.AutomationDocument.AccountId, $.Remediation.Message)\\",\\"State.$\\":\\"States.Format('SUCCESS')\\",\\"Details.$\\":\\"$.Remediation.LogData\\",\\"ExecId.$\\":\\"$.Remediation.ExecId\\",\\"AffectedObject.$\\":\\"$.Remediation.AffectedObject\\"}},\\"Next\\":\\"notify\\"},\\"check_ssm_doc_state Error\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"Notification\\":{\\"Message.$\\":\\"States.Format('check_ssm_doc_state returned an error: {}', $.AutomationDocument.Message)\\",\\"State.$\\":\\"States.Format('LAMBDAERROR')\\"},\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\"},\\"Next\\":\\"notify\\"},\\"Security Standard is not enabled\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"Notification\\":{\\"Message.$\\":\\"States.Format('Security Standard ({}) v{} is not enabled.', $.AutomationDocument.SecurityStandard, $.AutomationDocument.SecurityStandardVersion)\\",\\"State.$\\":\\"States.Format('STANDARDNOTENABLED')\\",\\"updateSecHub\\":\\"yes\\"},\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\",\\"AccountId.$\\":\\"$.AutomationDocument.AccountId\\",\\"AutomationDocId.$\\":\\"$.AutomationDocument.AutomationDocId\\",\\"RemediationRole.$\\":\\"$.AutomationDocument.RemediationRole\\",\\"ControlId.$\\":\\"$.AutomationDocument.ControlId\\",\\"SecurityStandard.$\\":\\"$.AutomationDocument.SecurityStandard\\",\\"SecurityStandardVersion.$\\":\\"$.AutomationDocument.SecurityStandardVersion\\"},\\"Next\\":\\"notify\\"},\\"No Remediation for Control\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"Notification\\":{\\"Message.$\\":\\"States.Format('Security Standard {} v{} control {} has no automated remediation.', $.AutomationDocument.SecurityStandard, $.AutomationDocument.SecurityStandardVersion, $.AutomationDocument.ControlId)\\",\\"State.$\\":\\"States.Format('NOREMEDIATION')\\",\\"updateSecHub\\":\\"yes\\"},\\"EventType.$\\":\\"$.EventType\\",\\"Finding.$\\":\\"$.Finding\\",\\"AccountId.$\\":\\"$.AutomationDocument.AccountId\\",\\"AutomationDocId.$\\":\\"$.AutomationDocument.AutomationDocId\\",\\"RemediationRole.$\\":\\"$.AutomationDocument.RemediationRole\\",\\"ControlId.$\\":\\"$.AutomationDocument.ControlId\\",\\"SecurityStandard.$\\":\\"$.AutomationDocument.SecurityStandard\\",\\"SecurityStandardVersion.$\\":\\"$.AutomationDocument.SecurityStandardVersion\\"},\\"Next\\":\\"notify\\"}}},\\"ItemsPath\\":\\"$.Findings\\"},\\"EOJ\\":{\\"Type\\":\\"Pass\\",\\"Comment\\":\\"END-OF-JOB\\",\\"End\\":true}},\\"TimeoutSeconds\\":900}",
            ],
          ],
        },
        "LoggingConfiguration": Object {
          "Destinations": Array [
            Object {
              "CloudWatchLogsLogGroup": Object {
                "LogGroupArn": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:eu-west-1:111111111111:log-group:ORCH_LOG_GROUP:*",
                    ],
                  ],
                },
              },
            },
          ],
          "IncludeExecutionData": true,
          "Level": "ALL",
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "orchestratorRole12B410FD",
            "Arn",
          ],
        },
        "StateMachineName": "SO0111-SHARR-Orchestrator",
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "sendNotifications1367638A": Object {
      "DependsOn": Array [
        "notifyRole40298120",
      ],
      "Metadata": Object {
        "cfn_nag": Object {
          "rules_to_suppress": Array [
            Object {
              "id": "W58",
              "reason": "False positive. Access is provided via a policy",
            },
            Object {
              "id": "W89",
              "reason": "There is no need to run this lambda in a VPC",
            },
            Object {
              "id": "W92",
              "reason": "There is no need for Reserved Concurrency due to low request rate",
            },
          ],
        },
      },
      "Properties": Object {
        "Code": Object {
          "S3Bucket": "solutions-eu-west-1",
          "S3Key": "aws-security-hub-automated-response-and-remediation/v1.0.0/lambda/send_notifications.py.zip",
        },
        "Description": "Sends notifications and log messages",
        "Environment": Object {
          "Variables": Object {
            "AWS_PARTITION": Object {
              "Ref": "AWS::Partition",
            },
            "SOLUTION_ID": "SO0111",
            "SOLUTION_VERSION": "v1.0.0",
            "log_level": "info",
          },
        },
        "FunctionName": "SO0111-SHARR-sendNotifications",
        "Handler": "send_notifications.lambda_handler",
        "Layers": Array [
          Object {
            "Ref": "SharrLambdaLayer5BF8F147",
          },
        ],
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "notifyRole40298120",
            "Arn",
          ],
        },
        "Runtime": "python3.8",
        "Timeout": 600,
      },
      "Type": "AWS::Lambda::Function",
    },
  },
}
`;
